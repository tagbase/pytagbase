# coding: utf-8

"""
    tagbase-server API

    tagbse-server provides HTTP endpoints for ingestion of various files \\ into a Tagbase SQL database. Input file support currently includes eTUFF (see [here](https://doi.org/10.6084/m9.figshare.10032848.v4) \\ and [here](https://doi.org/10.6084/m9.figshare.10159820.v1)). The REST API complies with [OpenAPI v3.0.3](https://spec.openapis.org/oas/v3.0.3.html). 

    The version of the OpenAPI document: v0.14.0
    Contact: tagtuna@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from pytagbase.models.tag200 import Tag200  # noqa: E501

class TestTag200(unittest.TestCase):
    """Tag200 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Tag200:
        """Test Tag200
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Tag200`
        """
        model = Tag200()  # noqa: E501
        if include_optional:
            return Tag200(
                tag = [
                    pytagbase.models.tag_submission.TagSubmission(
                        dataset_id = 1, 
                        date_time = '2022-04-01T04:58:21.319061+00:00', 
                        filename = 'eTUFF-sailfish-117259_2.txt', 
                        hash_sha256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 
                        metadata = {"person_owner":"John Do","owner_contect":"john@do.net","manufacturer":"telemetry inc.","model":"new_gen","attachment_method":"anchor"}, 
                        notes = 'Ingested by admin on XXXX-XX-XX to back-process campaign XYZ.', 
                        submission_id = 5, 
                        tag_id = 3, 
                        version = '1', )
                    ]
            )
        else:
            return Tag200(
        )
        """

    def testTag200(self):
        """Test Tag200"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
