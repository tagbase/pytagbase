# coding: utf-8

"""
    tagbase-server API

    tagbse-server provides HTTP endpoints for ingestion of various files \\ into a Tagbase SQL database. Input file support currently includes eTUFF (see [here](https://doi.org/10.6084/m9.figshare.10032848.v4) \\ and [here](https://doi.org/10.6084/m9.figshare.10159820.v1)). The REST API complies with [OpenAPI v3.0.3](https://spec.openapis.org/oas/v3.0.3.html). 

    The version of the OpenAPI document: v0.14.0
    Contact: tagtuna@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from pytagbase.models.tag_submission import TagSubmission

class Tag200(BaseModel):
    """
    Information for a given tag  # noqa: E501
    """
    tag: Optional[conlist(TagSubmission, max_items=100, min_items=1)] = Field(None, description="List containing one or more submissions for a given tag")
    __properties = ["tag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tag200:
        """Create an instance of Tag200 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tag (list)
        _items = []
        if self.tag:
            for _item in self.tag:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tag'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tag200:
        """Create an instance of Tag200 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tag200.parse_obj(obj)

        _obj = Tag200.parse_obj({
            "tag": [TagSubmission.from_dict(_item) for _item in obj.get("tag")] if obj.get("tag") is not None else None
        })
        return _obj


