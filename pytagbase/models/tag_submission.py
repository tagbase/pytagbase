# coding: utf-8

"""
    tagbase-server API

    tagbse-server provides HTTP endpoints for ingestion of various files \\ into a Tagbase SQL database. Input file support currently includes eTUFF (see [here](https://doi.org/10.6084/m9.figshare.10032848.v4) \\ and [here](https://doi.org/10.6084/m9.figshare.10159820.v1)). The REST API complies with [OpenAPI v3.0.3](https://spec.openapis.org/oas/v3.0.3.html). 

    The version of the OpenAPI document: v0.14.0
    Contact: tagtuna@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class TagSubmission(BaseModel):
    """
    TagSubmission
    """
    dataset_id: Optional[StrictInt] = Field(None, description="The primary key from the Dataset relation")
    date_time: Optional[StrictStr] = Field(None, description="Local datetime stamp at the time of eTUFF tag data file ingestion")
    filename: Optional[StrictStr] = Field(None, description="Full name and extension of the ingested eTUFF tag data file")
    hash_sha256: Optional[StrictStr] = Field(None, description="SHA256 hash representing the contents of the submission eTUFF file")
    metadata: Optional[Dict[str, StrictStr]] = Field(None, description="Contains the ingested tag metadata consistent with the eTUFF specification")
    notes: Optional[StrictStr] = Field(None, description="Free-form text field where details of submitted eTUFF file for ingest can be provided e.g. submitter name, etuff data contents (tag metadata and measurements + primary position data, or just secondary solutionpositional meta/data)")
    submission_id: Optional[StrictInt] = Field(None, description="Unique numeric ID assigned upon submission of a tag eTUFF data file for ingest/importation into Tagbase")
    tag_id: Optional[StrictInt] = Field(None, description="Unique numeric Tag ID associated with the ingested tag eTUFF data file")
    version: Optional[StrictStr] = Field(None, description="Version identifier for the eTUFF tag data file ingested")
    __properties = ["dataset_id", "date_time", "filename", "hash_sha256", "metadata", "notes", "submission_id", "tag_id", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TagSubmission:
        """Create an instance of TagSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TagSubmission:
        """Create an instance of TagSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TagSubmission.parse_obj(obj)

        _obj = TagSubmission.parse_obj({
            "dataset_id": obj.get("dataset_id"),
            "date_time": obj.get("date_time"),
            "filename": obj.get("filename"),
            "hash_sha256": obj.get("hash_sha256"),
            "metadata": obj.get("metadata"),
            "notes": obj.get("notes"),
            "submission_id": obj.get("submission_id"),
            "tag_id": obj.get("tag_id"),
            "version": obj.get("version")
        })
        return _obj


